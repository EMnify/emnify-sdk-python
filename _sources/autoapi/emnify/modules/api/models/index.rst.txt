:py:mod:`emnify.modules.api.models`
===================================

.. py:module:: emnify.modules.api.models


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   emnify.modules.api.models.Authentication
   emnify.modules.api.models.AuthenticationResponse
   emnify.modules.api.models.Auth404Response
   emnify.modules.api.models.Field40xResponse
   emnify.modules.api.models.ChangeQuota422Response
   emnify.modules.api.models.Status
   emnify.modules.api.models.Type
   emnify.modules.api.models.CreateMFAResponse
   emnify.modules.api.models.Status1
   emnify.modules.api.models.ActivateMFAKeyRequest
   emnify.modules.api.models.Country
   emnify.modules.api.models.Error
   emnify.modules.api.models.SimpleError
   emnify.modules.api.models.APICallback
   emnify.modules.api.models.CallbackSecret
   emnify.modules.api.models.ApiType
   emnify.modules.api.models.DataStreamType
   emnify.modules.api.models.DataStream
   emnify.modules.api.models.DataStreamType1
   emnify.modules.api.models.ApiType1
   emnify.modules.api.models.ApiCallback
   emnify.modules.api.models.CreateDataStream
   emnify.modules.api.models.TrafficType
   emnify.modules.api.models.Currency
   emnify.modules.api.models.Data
   emnify.modules.api.models.TrafficType1
   emnify.modules.api.models.Currency1
   emnify.modules.api.models.Sms
   emnify.modules.api.models.LastMonth
   emnify.modules.api.models.SIMStatsResponseObject
   emnify.modules.api.models.TrafficType2
   emnify.modules.api.models.Currency2
   emnify.modules.api.models.Sms1
   emnify.modules.api.models.StatsResponseObject
   emnify.modules.api.models.TrafficType3
   emnify.modules.api.models.Currency3
   emnify.modules.api.models.Data1
   emnify.modules.api.models.TrafficType4
   emnify.modules.api.models.Currency4
   emnify.modules.api.models.Sms2
   emnify.modules.api.models.SIMStatsDataObject
   emnify.modules.api.models.TrafficType5
   emnify.modules.api.models.Currency5
   emnify.modules.api.models.TrafficStatsObject
   emnify.modules.api.models.TrafficTypeObject
   emnify.modules.api.models.CurrencyObject
   emnify.modules.api.models.TrafficType6
   emnify.modules.api.models.Data2
   emnify.modules.api.models.TrafficType7
   emnify.modules.api.models.Sms3
   emnify.modules.api.models.StatsObjectItem
   emnify.modules.api.models.StatsObject
   emnify.modules.api.models.TrafficType8
   emnify.modules.api.models.VolumeObject
   emnify.modules.api.models.Country1
   emnify.modules.api.models.SmppBind
   emnify.modules.api.models.Country2
   emnify.modules.api.models.Operator
   emnify.modules.api.models.MsisdnPool
   emnify.modules.api.models.GtConfig
   emnify.modules.api.models.SccpCalledPartyPrefix
   emnify.modules.api.models.SmsRoutingData
   emnify.modules.api.models.RatType
   emnify.modules.api.models.ListofSMSresponse
   emnify.modules.api.models.SubmitMTSMSrequest
   emnify.modules.api.models.GetdetailsofSMSresponse
   emnify.modules.api.models.RetrieveConnectivityInformationresponse
   emnify.modules.api.models.OperatorPatchRequest
   emnify.modules.api.models.OperatorDataPostRequest
   emnify.modules.api.models.RetrieveOperatorBlacklistresponse
   emnify.modules.api.models.RetrievePrepaidBalanceresponse
   emnify.modules.api.models.UpdatePrepaidBalanceresponse
   emnify.modules.api.models.Description
   emnify.modules.api.models.Id
   emnify.modules.api.models.Status2
   emnify.modules.api.models.Id1
   emnify.modules.api.models.Description1
   emnify.modules.api.models.ActionOnExhaustion
   emnify.modules.api.models.EndpointQuota
   emnify.modules.api.models.ThrottleCutoffVolume
   emnify.modules.api.models.Id2
   emnify.modules.api.models.Description2
   emnify.modules.api.models.ActionOnExhaustion1
   emnify.modules.api.models.Description3
   emnify.modules.api.models.Id3
   emnify.modules.api.models.QuotaStatus
   emnify.modules.api.models.SMSQuota
   emnify.modules.api.models.RetrieveEventsresponse
   emnify.modules.api.models.StartingaUSSDDialogrequest
   emnify.modules.api.models.StartingaUSSDDialogresponse
   emnify.modules.api.models.RetrieveOrganisationListresponse
   emnify.modules.api.models.CreateanOrganisationrequest
   emnify.modules.api.models.RetrieveaSingleOrganisationresponse
   emnify.modules.api.models.UpdateOrganisationrequest
   emnify.modules.api.models.RetrieveOrganisationStatusesresponse
   emnify.modules.api.models.RetrieveAvailableOrganisationTypesresponse
   emnify.modules.api.models.RetrieveAvailableOrganisationRelationTypesresponse
   emnify.modules.api.models.RetrieveAvailableOrganisationVerificationTypesresponse
   emnify.modules.api.models.RetrieveContactsforanOrganisationresponse
   emnify.modules.api.models.CreateaContactforanOrganisationrequest
   emnify.modules.api.models.RetrieveaSingleContactresponse
   emnify.modules.api.models.UpdateaSingleContactresponse
   emnify.modules.api.models.Retrievelistofassignedtariffsforanorganisationresponse
   emnify.modules.api.models.RetrieveBillingPeriodsresponse
   emnify.modules.api.models.RetrieveBillingDataByPeriodResponse
   emnify.modules.api.models.RetrieveSIMlistresponse
   emnify.modules.api.models.SIMResource
   emnify.modules.api.models.UpdateSIMrequest
   emnify.modules.api.models.ListofAllAvailableSIMStatusesresponse
   emnify.modules.api.models.ListofIMSIsresponse
   emnify.modules.api.models.RetrieveIMSIByIDresponse
   emnify.modules.api.models.UpdateIMSIrequest
   emnify.modules.api.models.ListofallavailableIMSIstatusesresponse
   emnify.modules.api.models.ListofTariffsresponse
   emnify.modules.api.models.CreateTariffrequest
   emnify.modules.api.models.TariffCategory
   emnify.modules.api.models.RetrieveTariffresponse
   emnify.modules.api.models.PatchTariffrequest
   emnify.modules.api.models.ListofavailableTariffstatusesresponse
   emnify.modules.api.models.ListofRatezonesresponse
   emnify.modules.api.models.AddRatezonetoTariffrequest
   emnify.modules.api.models.PatchRatezonerequest
   emnify.modules.api.models.Listofavailableratezonestatusesresponse
   emnify.modules.api.models.AddRatetoaRatezonerequest
   emnify.modules.api.models.UpdateRateofaRatezonerequest
   emnify.modules.api.models.ListofTariffProfilesresponse
   emnify.modules.api.models.CreateTariffProfilerequest
   emnify.modules.api.models.RetrieveTariffProfileresponse
   emnify.modules.api.models.PatchTariffProfilerequest
   emnify.modules.api.models.RetrieveCoverageresponse
   emnify.modules.api.models.Retrievesingleselectionsresponse
   emnify.modules.api.models.RetrieveServiceProfileListresponse
   emnify.modules.api.models.CreateaServiceProfilerequest
   emnify.modules.api.models.RetrieveaSingleServiceProfileresponse
   emnify.modules.api.models.UpdateServiceProfilerequest
   emnify.modules.api.models.RetrieveAvailableServicesresponse
   emnify.modules.api.models.RetrieveavailableTrafficLimitsresponse
   emnify.modules.api.models.CreateTrafficLimitrequest
   emnify.modules.api.models.Period
   emnify.modules.api.models.ServiceTrafficLimitsResponseItem
   emnify.modules.api.models.ServiceTrafficLimitsResponse
   emnify.modules.api.models.RetrieveDNSlistresponseItem
   emnify.modules.api.models.RetrieveDNSlistresponse
   emnify.modules.api.models.CreateaDNSentryrequest
   emnify.modules.api.models.Status3
   emnify.modules.api.models.Organisation
   emnify.modules.api.models.User
   emnify.modules.api.models.CreateUserrequest
   emnify.modules.api.models.RetrievetheUserresponse
   emnify.modules.api.models.UpdateUserrequest
   emnify.modules.api.models.RetrieveUserByUsernameresponse
   emnify.modules.api.models.RetrieveAvailableUserStatusesresponse
   emnify.modules.api.models.EventType
   emnify.modules.api.models.EventSource
   emnify.modules.api.models.EventSeverity
   emnify.modules.api.models.Organisation1
   emnify.modules.api.models.User1
   emnify.modules.api.models.Event
   emnify.modules.api.models.RetrieveEventsresponse4
   emnify.modules.api.models.AccountActivationrequest
   emnify.modules.api.models.ReSendActivationMailrequest
   emnify.modules.api.models.Id4
   emnify.modules.api.models.Status4
   emnify.modules.api.models.CoverageUpdateVPLMNStatusPatch
   emnify.modules.api.models.ChangePasswordrequest
   emnify.modules.api.models.ChangePassword422response
   emnify.modules.api.models.RetrieveownIPAddressSpacesresponse
   emnify.modules.api.models.RetrieveAvailableAddressSpacesresponse
   emnify.modules.api.models.Field204Response
   emnify.modules.api.models.RetrieveEventsresponse5
   emnify.modules.api.models.RetrieveEventTypesresponse
   emnify.modules.api.models.RetrieveAvailableCountriesresponse
   emnify.modules.api.models.RetrieveAvailableCurrenciesresponse
   emnify.modules.api.models.RetrieveAvailableDataBlocksizesresponse
   emnify.modules.api.models.RetrieveAvailableDataThrottlesresponse
   emnify.modules.api.models.RetrieveAvailableOperatorsresponse
   emnify.modules.api.models.RetrieveAvailableBreakoutRegionsresponse
   emnify.modules.api.models.TariffPlanStatusesGetResponse
   emnify.modules.api.models.TariffPlanConfigGetResponse
   emnify.modules.api.models.RetrieveAvailableESMEInterfaceTypesresponse
   emnify.modules.api.models.PDPContextDefinitionsGetResponse
   emnify.modules.api.models.Organisation2
   emnify.modules.api.models.PDPContextDefinitionsCreateUpdate
   emnify.modules.api.models.PDPContextDefinitionsCreateResponse
   emnify.modules.api.models.RatType1
   emnify.modules.api.models.QoSDefinitionCreateRequest
   emnify.modules.api.models.RatType2
   emnify.modules.api.models.QoSDefinitionGetResponse
   emnify.modules.api.models.QoSDefinitionPatchRequest
   emnify.modules.api.models.NetworkCoverage
   emnify.modules.api.models.TrafficType9
   emnify.modules.api.models.Currency6
   emnify.modules.api.models.IOTCreate
   emnify.modules.api.models.HasId
   emnify.modules.api.models.LocalDate
   emnify.modules.api.models.LocalDateTime
   emnify.modules.api.models.Currency7
   emnify.modules.api.models.GtConfig1
   emnify.modules.api.models.MsisdnPool1
   emnify.modules.api.models.Country3
   emnify.modules.api.models.Operator1
   emnify.modules.api.models.Organisation3
   emnify.modules.api.models.PaymentOption
   emnify.modules.api.models.Type1
   emnify.modules.api.models.OrgPrepaidBalance
   emnify.modules.api.models.SmppBind1
   emnify.modules.api.models.SmsRoutingListItem
   emnify.modules.api.models.SmsRoutingList1
   emnify.modules.api.models.SmsRoutingList
   emnify.modules.api.models.Organisation4
   emnify.modules.api.models.SmsRoutingEntry
   emnify.modules.api.models.SccpCalledPartyPrefix1
   emnify.modules.api.models.Country4
   emnify.modules.api.models.SmppBind2
   emnify.modules.api.models.Country5
   emnify.modules.api.models.Operator2
   emnify.modules.api.models.MsisdnPool2
   emnify.modules.api.models.GtConfig2
   emnify.modules.api.models.SccpCalledPartyPrefix2
   emnify.modules.api.models.SmsRoutingDataCreateUpdateRequest
   emnify.modules.api.models.GetEntryPoints
   emnify.modules.api.models.OperatorPostRequest
   emnify.modules.api.models.CreateMFAKeyresponse
   emnify.modules.api.models.ActivateMFAKeyrequest
   emnify.modules.api.models.MFAKeyStatusLookupresponse
   emnify.modules.api.models.MFAKeyTypeLookupresponse
   emnify.modules.api.models.Listoftrusteddevicesresponse
   emnify.modules.api.models.ListofApplicationTokensresponse
   emnify.modules.api.models.CreateApplicationTokenrequest
   emnify.modules.api.models.CreateApplicationTokenresponse
   emnify.modules.api.models.ApplicationToken
   emnify.modules.api.models.EndpointStatus
   emnify.modules.api.models.ServiceProfile
   emnify.modules.api.models.TariffProfile
   emnify.modules.api.models.Sim
   emnify.modules.api.models.IpAddressSpace
   emnify.modules.api.models.Status5
   emnify.modules.api.models.ServiceProfile1
   emnify.modules.api.models.TariffProfile1
   emnify.modules.api.models.IpAddressSpace1
   emnify.modules.api.models.Sim1
   emnify.modules.api.models.Endpoint
   emnify.modules.api.models.RetrieveSingleEndpointresponse
   emnify.modules.api.models.UpdateEndpointrequest
   emnify.modules.api.models.RetrieveEndpointConnectivityStatusresponse
   emnify.modules.api.models.GetEndpointLocationByIdResponse
   emnify.modules.api.models.RetrieveEndpointStatisticsresponse
   emnify.modules.api.models.Status6
   emnify.modules.api.models.Type2
   emnify.modules.api.models.CloudConnectAttachment
   emnify.modules.api.models.Status7
   emnify.modules.api.models.Type3
   emnify.modules.api.models.GetCloudConnectAttachmentsResponseItem
   emnify.modules.api.models.GetCloudConnectAttachmentsResponse
   emnify.modules.api.models.CloudConnectBreakoutType
   emnify.modules.api.models.GetCloudConnectBreakoutTypesResponseItem
   emnify.modules.api.models.GetCloudConnectBreakoutTypesResponse
   emnify.modules.api.models.Status8
   emnify.modules.api.models.Metrics
   emnify.modules.api.models.TunnelInformation
   emnify.modules.api.models.GetCloudConnectAttachmentByIdResponseItem
   emnify.modules.api.models.GetCloudConnectAttachmentByIdResponse
   emnify.modules.api.models.Type4
   emnify.modules.api.models.CreateCloudConnectTGWRequest
   emnify.modules.api.models.Type5
   emnify.modules.api.models.CreateCloudConnectVPNRequest
   emnify.modules.api.models.Currency8
   emnify.modules.api.models.CloudConnectCharge
   emnify.modules.api.models.Currency9
   emnify.modules.api.models.ListCloudConnectPricesResponseItem
   emnify.modules.api.models.ListCloudConnectPricesResponse
   emnify.modules.api.models.BreakoutTypeId
   emnify.modules.api.models.Currency10
   emnify.modules.api.models.CloudConnectCustomPriceRequest
   emnify.modules.api.models.Region
   emnify.modules.api.models.GetCloudConnectTransitGatewaysResponseItem
   emnify.modules.api.models.GetCloudConnectTransitGatewaysResponse
   emnify.modules.api.models.CreateCloudConnectTransitGatewaysRequest
   emnify.modules.api.models.UpdateCloudConnectTransitGatewayByIdRequest
   emnify.modules.api.models.GetCloudConnectBreakoutTypeWhitelistResponseItem
   emnify.modules.api.models.GetCloudConnectBreakoutTypeWhitelistResponse
   emnify.modules.api.models.Formfactor
   emnify.modules.api.models.SimModel




.. py:class:: Authentication


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: application_token
      :type: Optional[str]

      

   .. py:attribute:: username
      :type: Optional[str]

      

   .. py:attribute:: password
      :type: Optional[pydantic.SecretStr]

      

   .. py:attribute:: refresh_token
      :type: Optional[str]

      


.. py:class:: AuthenticationResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: auth_token
      :type: Optional[str]

      

   .. py:attribute:: refresh_token
      :type: Optional[str]

      


.. py:class:: Auth404Response


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: error_code
      :type: Optional[float]

      

   .. py:attribute:: error_token
      :type: Optional[str]

      

   .. py:attribute:: message
      :type: Optional[str]

      


.. py:class:: Field40xResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: error_code
      :type: Optional[int]

      

   .. py:attribute:: error_token
      :type: Optional[str]

      

   .. py:attribute:: message
      :type: Optional[str]

      


.. py:class:: ChangeQuota422Response


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: message
      :type: Optional[str]

      


.. py:class:: Status


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: Type


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: CreateMFAResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: status
      :type: Optional[Status]

      

   .. py:attribute:: type
      :type: Optional[Type]

      

   .. py:attribute:: secret_key
      :type: Optional[str]

      

   .. py:attribute:: otpauth
      :type: Optional[str]

      

   .. py:attribute:: creation_date
      :type: Optional[str]

      


.. py:class:: Status1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: code
      :type: Optional[float]

      


.. py:class:: ActivateMFAKeyRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: status
      :type: Optional[Status1]

      


.. py:class:: Country


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country_code
      :type: Optional[int]

      

   .. py:attribute:: mcc
      :type: Optional[str]

      

   .. py:attribute:: iso_code
      :type: Optional[str]

      

   .. py:attribute:: latitude
      :type: Optional[float]

      

   .. py:attribute:: longitude
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: Error


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: code
      :type: str

      

   .. py:attribute:: message
      :type: str

      


.. py:class:: SimpleError


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: message
      :type: str

      


.. py:class:: APICallback


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: organisation_id
      :type: Optional[str]

      

   .. py:attribute:: url
      :type: Optional[str]

      

   .. py:attribute:: created
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: purpose
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: CallbackSecret


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: organisation_id
      :type: Optional[str]

      

   .. py:attribute:: purpose
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: ApiType


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: DataStreamType


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: DataStream


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: last_traffic_log_id
      :type: Optional[int]

      

   .. py:attribute:: last_event_id
      :type: Optional[str]

      

   .. py:attribute:: last_dispatched_timestamp
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: last_result_code
      :type: Optional[str]

      

   .. py:attribute:: active
      :type: Optional[int]

      

   .. py:attribute:: running
      :type: Optional[int]

      

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: api_callback
      :type: Optional[str]

      

   .. py:attribute:: api_type
      :type: Optional[ApiType]

      

   .. py:attribute:: data_stream_type
      :type: Optional[DataStreamType]

      


.. py:class:: DataStreamType1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: ApiType1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: route
      :type: Optional[str]

      

   .. py:attribute:: reqParams
      :type: Optional[str]

      

   .. py:attribute:: fromServer
      :type: Optional[bool]

      

   .. py:attribute:: parentResource
      :type: Optional[str]

      

   .. py:attribute:: restangularCollection
      :type: Optional[bool]

      


.. py:class:: ApiCallback


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: organisation_id
      :type: Optional[str]

      

   .. py:attribute:: url
      :type: Optional[str]

      

   .. py:attribute:: created
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: purpose
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: route
      :type: Optional[str]

      

   .. py:attribute:: reqParams
      :type: Optional[str]

      

   .. py:attribute:: fromServer
      :type: Optional[bool]

      

   .. py:attribute:: parentResource
      :type: Optional[str]

      

   .. py:attribute:: restangularCollection
      :type: Optional[bool]

      


.. py:class:: CreateDataStream


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: stream_historic_data
      :type: Optional[int]

      

   .. py:attribute:: data_stream_type
      :type: Optional[DataStreamType1]

      

   .. py:attribute:: api_type
      :type: Optional[ApiType1]

      

   .. py:attribute:: api_callback
      :type: Optional[ApiCallback]

      

   .. py:attribute:: event_stream
      :type: Optional[str]

      

   .. py:attribute:: api_username
      :type: Optional[str]

      

   .. py:attribute:: api_password
      :type: Optional[str]

      

   .. py:attribute:: api_parameter
      :type: Optional[str]

      


.. py:class:: TrafficType


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Currency


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: code
      :type: Optional[str]

      

   .. py:attribute:: symbol
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Data


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: sim_id
      :type: Optional[float]

      

   .. py:attribute:: month
      :type: Optional[datetime.date]

      

   .. py:attribute:: volume
      :type: Optional[float]

      

   .. py:attribute:: volume_tx
      :type: Optional[float]

      

   .. py:attribute:: volume_rx
      :type: Optional[float]

      

   .. py:attribute:: traffic_type_id
      :type: Optional[float]

      

   .. py:attribute:: last_updated
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: cost
      :type: Optional[float]

      

   .. py:attribute:: currency_id
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: traffic_type
      :type: Optional[TrafficType]

      

   .. py:attribute:: currency
      :type: Optional[Currency]

      


.. py:class:: TrafficType1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Currency1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: code
      :type: Optional[str]

      

   .. py:attribute:: symbol
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Sms


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: sim_id
      :type: Optional[float]

      

   .. py:attribute:: month
      :type: Optional[datetime.date]

      

   .. py:attribute:: volume
      :type: Optional[float]

      

   .. py:attribute:: volume_tx
      :type: Optional[float]

      

   .. py:attribute:: volume_rx
      :type: Optional[float]

      

   .. py:attribute:: traffic_type_id
      :type: Optional[float]

      

   .. py:attribute:: last_updated
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: cost
      :type: Optional[float]

      

   .. py:attribute:: currency_id
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: traffic_type
      :type: Optional[TrafficType1]

      

   .. py:attribute:: currency
      :type: Optional[Currency1]

      


.. py:class:: LastMonth


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: data
      :type: Optional[Data]

      

   .. py:attribute:: sms
      :type: Optional[Sms]

      


.. py:class:: SIMStatsResponseObject


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: last_month
      :type: LastMonth

      

   .. py:attribute:: current_month
      :type: Dict[str, Any]

      

   .. py:attribute:: last_hour
      :type: Dict[str, Any]

      


.. py:class:: TrafficType2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Currency2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: code
      :type: Optional[str]

      

   .. py:attribute:: symbol
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Sms1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: sim_id
      :type: Optional[float]

      

   .. py:attribute:: month
      :type: Optional[datetime.date]

      

   .. py:attribute:: volume
      :type: Optional[float]

      

   .. py:attribute:: volume_tx
      :type: Optional[float]

      

   .. py:attribute:: volume_rx
      :type: Optional[float]

      

   .. py:attribute:: traffic_type_id
      :type: Optional[float]

      

   .. py:attribute:: last_updated
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: cost
      :type: Optional[float]

      

   .. py:attribute:: currency_id
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: traffic_type
      :type: Optional[TrafficType2]

      

   .. py:attribute:: currency
      :type: Optional[Currency2]

      


.. py:class:: StatsResponseObject


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: date
      :type: Optional[str]

      

   .. py:attribute:: data
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: sms
      :type: Optional[Sms1]

      


.. py:class:: TrafficType3


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Currency3


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: code
      :type: Optional[str]

      

   .. py:attribute:: symbol
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Data1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: sim_id
      :type: Optional[float]

      

   .. py:attribute:: month
      :type: Optional[datetime.date]

      

   .. py:attribute:: volume
      :type: Optional[float]

      

   .. py:attribute:: volume_tx
      :type: Optional[float]

      

   .. py:attribute:: volume_rx
      :type: Optional[float]

      

   .. py:attribute:: traffic_type_id
      :type: Optional[float]

      

   .. py:attribute:: last_updated
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: cost
      :type: Optional[float]

      

   .. py:attribute:: currency_id
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: traffic_type
      :type: Optional[TrafficType3]

      

   .. py:attribute:: currency
      :type: Optional[Currency3]

      


.. py:class:: TrafficType4


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Currency4


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: code
      :type: Optional[str]

      

   .. py:attribute:: symbol
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Sms2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: sim_id
      :type: Optional[float]

      

   .. py:attribute:: month
      :type: Optional[datetime.date]

      

   .. py:attribute:: volume
      :type: Optional[float]

      

   .. py:attribute:: volume_tx
      :type: Optional[float]

      

   .. py:attribute:: volume_rx
      :type: Optional[float]

      

   .. py:attribute:: traffic_type_id
      :type: Optional[float]

      

   .. py:attribute:: last_updated
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: cost
      :type: Optional[float]

      

   .. py:attribute:: currency_id
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: traffic_type
      :type: Optional[TrafficType4]

      

   .. py:attribute:: currency
      :type: Optional[Currency4]

      


.. py:class:: SIMStatsDataObject


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: data
      :type: Optional[Data1]

      

   .. py:attribute:: sms
      :type: Optional[Sms2]

      


.. py:class:: TrafficType5


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Currency5


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: code
      :type: Optional[str]

      

   .. py:attribute:: symbol
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: TrafficStatsObject


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: sim_id
      :type: Optional[float]

      

   .. py:attribute:: month
      :type: Optional[datetime.date]

      

   .. py:attribute:: volume
      :type: Optional[float]

      

   .. py:attribute:: volume_tx
      :type: Optional[float]

      

   .. py:attribute:: volume_rx
      :type: Optional[float]

      

   .. py:attribute:: traffic_type_id
      :type: Optional[float]

      

   .. py:attribute:: last_updated
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: cost
      :type: Optional[float]

      

   .. py:attribute:: currency_id
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: traffic_type
      :type: Optional[TrafficType5]

      

   .. py:attribute:: currency
      :type: Optional[Currency5]

      


.. py:class:: TrafficTypeObject


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: CurrencyObject


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: code
      :type: Optional[str]

      

   .. py:attribute:: symbol
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: TrafficType6


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Data2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: volume
      :type: Optional[float]

      

   .. py:attribute:: volume_tx
      :type: Optional[float]

      

   .. py:attribute:: volume_rx
      :type: Optional[float]

      

   .. py:attribute:: cost
      :type: Optional[float]

      

   .. py:attribute:: traffic_type
      :type: Optional[TrafficType6]

      

   .. py:attribute:: currency
      :type: Optional[str]

      


.. py:class:: TrafficType7


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Sms3


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: volume
      :type: Optional[float]

      

   .. py:attribute:: volume_tx
      :type: Optional[float]

      

   .. py:attribute:: volume_rx
      :type: Optional[float]

      

   .. py:attribute:: cost
      :type: Optional[float]

      

   .. py:attribute:: traffic_type
      :type: Optional[TrafficType7]

      

   .. py:attribute:: currency
      :type: Optional[str]

      


.. py:class:: StatsObjectItem


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: date
      :type: Optional[StatsObjectItem.date]

      

   .. py:attribute:: data
      :type: Optional[Data2]

      

   .. py:attribute:: sms
      :type: Optional[Sms3]

      


.. py:class:: StatsObject


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: List[StatsObjectItem]

      


.. py:class:: TrafficType8


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: VolumeObject


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: volume
      :type: Optional[float]

      

   .. py:attribute:: volume_tx
      :type: Optional[float]

      

   .. py:attribute:: volume_rx
      :type: Optional[float]

      

   .. py:attribute:: cost
      :type: Optional[float]

      

   .. py:attribute:: traffic_type
      :type: Optional[TrafficType8]

      

   .. py:attribute:: currency
      :type: Optional[str]

      


.. py:class:: Country1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country_code
      :type: Optional[int]

      

   .. py:attribute:: mcc
      :type: Optional[float]

      

   .. py:attribute:: iso_code
      :type: Optional[str]

      

   .. py:attribute:: latitude
      :type: Optional[float]

      

   .. py:attribute:: longitude
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: SmppBind


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: system_id
      :type: Optional[str]

      

   .. py:attribute:: smpp_bind_status_id
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: Country2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country_code
      :type: Optional[int]

      

   .. py:attribute:: mcc
      :type: Optional[float]

      

   .. py:attribute:: iso_code
      :type: Optional[str]

      

   .. py:attribute:: latitude
      :type: Optional[float]

      

   .. py:attribute:: longitude
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: Operator


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: country_id
      :type: Optional[str]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country_name
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: country
      :type: Optional[Country2]

      

   .. py:attribute:: tapcodes
      :type: Optional[str]

      

   .. py:attribute:: mncs
      :type: Optional[str]

      


.. py:class:: MsisdnPool


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: resource_provider_id
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: GtConfig


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: imsi_prefix
      :type: Optional[str]

      

   .. py:attribute:: calling_party
      :type: Optional[str]

      

   .. py:attribute:: called_party_tt
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: SccpCalledPartyPrefix


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: prefix
      :type: Optional[str]

      

   .. py:attribute:: tt
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: SmsRoutingData


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: sms_routing_id
      :type: Optional[str]

      

   .. py:attribute:: country
      :type: Optional[Country1]

      

   .. py:attribute:: smpp_bind
      :type: Optional[SmppBind]

      

   .. py:attribute:: operator
      :type: Optional[Operator]

      

   .. py:attribute:: msisdn_pool
      :type: Optional[MsisdnPool]

      

   .. py:attribute:: gt_config
      :type: Optional[GtConfig]

      

   .. py:attribute:: sccp_called_party_prefix
      :type: Optional[SccpCalledPartyPrefix]

      


.. py:class:: RatType


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: ListofSMSresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: submit_date
      :type: Optional[str]

      

   .. py:attribute:: delivery_date
      :type: Optional[str]

      

   .. py:attribute:: expiry_date
      :type: Optional[str]

      

   .. py:attribute:: final_date
      :type: Optional[str]

      

   .. py:attribute:: retry_date
      :type: Optional[str]

      

   .. py:attribute:: last_delivery_attempt
      :type: Optional[str]

      

   .. py:attribute:: retry_count
      :type: Optional[str]

      

   .. py:attribute:: gsm_map_error
      :type: Optional[str]

      

   .. py:attribute:: dcs
      :type: Optional[int]

      

   .. py:attribute:: pid
      :type: Optional[int]

      

   .. py:attribute:: source_address
      :type: Optional[str]

      

   .. py:attribute:: endpoint
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: sim_id
      :type: Optional[str]

      

   .. py:attribute:: iccid
      :type: Optional[str]

      

   .. py:attribute:: msisdn
      :type: Optional[str]

      

   .. py:attribute:: imsi
      :type: Optional[str]

      

   .. py:attribute:: msc
      :type: Optional[str]

      

   .. py:attribute:: udh
      :type: Optional[str]

      

   .. py:attribute:: payload
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: sms_type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: source_address_type
      :type: Optional[Dict[str, Any]]

      


.. py:class:: SubmitMTSMSrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: source_address
      :type: str

      

   .. py:attribute:: payload
      :type: str

      


.. py:class:: GetdetailsofSMSresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: submit_date
      :type: Optional[str]

      

   .. py:attribute:: delivery_date
      :type: Optional[str]

      

   .. py:attribute:: expiry_date
      :type: Optional[str]

      

   .. py:attribute:: final_date
      :type: Optional[str]

      

   .. py:attribute:: retry_date
      :type: Optional[str]

      

   .. py:attribute:: last_delivery_attempt
      :type: Optional[str]

      

   .. py:attribute:: retry_count
      :type: Optional[str]

      

   .. py:attribute:: gsm_map_error
      :type: Optional[str]

      

   .. py:attribute:: dcs
      :type: Optional[int]

      

   .. py:attribute:: pid
      :type: Optional[int]

      

   .. py:attribute:: source_address
      :type: Optional[str]

      

   .. py:attribute:: endpoint
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: sim_id
      :type: Optional[str]

      

   .. py:attribute:: iccid
      :type: Optional[str]

      

   .. py:attribute:: msisdn
      :type: Optional[str]

      

   .. py:attribute:: imsi
      :type: Optional[str]

      

   .. py:attribute:: msc
      :type: Optional[str]

      

   .. py:attribute:: udh
      :type: Optional[str]

      

   .. py:attribute:: payload
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: sms_type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: source_address_type
      :type: Optional[Dict[str, Any]]

      


.. py:class:: RetrieveConnectivityInformationresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: ussd_info
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: subscriber_info
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: request_timestamp
      :type: Optional[str]

      

   .. py:attribute:: reply_timestamp
      :type: Optional[str]

      


.. py:class:: OperatorPatchRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: Any

      


.. py:class:: OperatorDataPostRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: Any

      


.. py:class:: RetrieveOperatorBlacklistresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: tapcode
      :type: Optional[List[Dict[str, Any]]]

      

   .. py:attribute:: mnc
      :type: Optional[List[Dict[str, Any]]]

      


.. py:class:: RetrievePrepaidBalanceresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: amount
      :type: Optional[float]

      

   .. py:attribute:: currency
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: last_updated
      :type: Optional[str]

      

   .. py:attribute:: expiry_date
      :type: Optional[str]

      


.. py:class:: UpdatePrepaidBalanceresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: amount
      :type: Optional[int]

      

   .. py:attribute:: currency
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: expiry_date
      :type: Optional[str]

      


.. py:class:: Description(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: EXHAUSTED
      :value: 'EXHAUSTED'

      

   .. py:attribute:: ACTIVE
      :value: 'ACTIVE'

      

   .. py:attribute:: EXPIRED
      :value: 'EXPIRED'

      


.. py:class:: Id(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: integer_1
      :value: 1

      

   .. py:attribute:: integer_2
      :value: 2

      

   .. py:attribute:: integer_3
      :value: 3

      


.. py:class:: Status2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[Description]

      

   .. py:attribute:: id
      :type: Id

      


.. py:class:: Id1(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: integer_1
      :value: 1

      

   .. py:attribute:: integer_2
      :value: 2

      


.. py:class:: Description1(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: Throttle
      :value: 'Throttle'

      

   .. py:attribute:: Block
      :value: 'Block'

      


.. py:class:: ActionOnExhaustion


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Id1

      

   .. py:attribute:: description
      :type: Optional[Description1]

      

   .. py:attribute:: peak_throughput
      :type: Optional[int]

      


.. py:class:: EndpointQuota


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: last_volume_added
      :type: Optional[float]

      

   .. py:attribute:: last_status_change_date
      :type: Optional[constr(regex='^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$')]

      

   .. py:attribute:: auto_refill
      :type: Optional[int]

      

   .. py:attribute:: threshold_volume
      :type: Optional[float]

      

   .. py:attribute:: threshold_percentage
      :type: Optional[float]

      

   .. py:attribute:: status
      :type: Status2

      

   .. py:attribute:: volume
      :type: float

      

   .. py:attribute:: expiry_date
      :type: constr(regex='^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$')

      

   .. py:attribute:: action_on_exhaustion
      :type: ActionOnExhaustion

      

   .. py:attribute:: peak_throughput
      :type: Optional[int]

      


.. py:class:: ThrottleCutoffVolume


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: float

      

   .. py:attribute:: volume
      :type: Optional[float]

      


.. py:class:: Id2(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: integer_1
      :value: 1

      

   .. py:attribute:: integer_2
      :value: 2

      


.. py:class:: Description2(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: Throttle
      :value: 'Throttle'

      

   .. py:attribute:: Block
      :value: 'Block'

      


.. py:class:: ActionOnExhaustion1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Id2

      

   .. py:attribute:: description
      :type: Optional[Description2]

      

   .. py:attribute:: peak_throughput
      :type: Optional[int]

      


.. py:class:: Description3(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: EXHAUSTED
      :value: 'EXHAUSTED'

      

   .. py:attribute:: ACTIVE
      :value: 'ACTIVE'

      

   .. py:attribute:: EXPIRED
      :value: 'EXPIRED'

      


.. py:class:: Id3(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: integer_1
      :value: 1

      

   .. py:attribute:: integer_2
      :value: 2

      

   .. py:attribute:: integer_3
      :value: 3

      


.. py:class:: QuotaStatus


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[Description3]

      

   .. py:attribute:: id
      :type: Id3

      


.. py:class:: SMSQuota


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: volume
      :type: float

      

   .. py:attribute:: expiry_date
      :type: datetime.datetime

      

   .. py:attribute:: last_volume_added
      :type: Optional[float]

      

   .. py:attribute:: last_status_change_date
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: auto_refill
      :type: Optional[bool]

      

   .. py:attribute:: threshold_percentage
      :type: float

      

   .. py:attribute:: threshold_volume
      :type: Optional[float]

      

   .. py:attribute:: status
      :type: QuotaStatus

      

   .. py:attribute:: action_on_exhaustion
      :type: Optional[ActionOnExhaustion1]

      


.. py:class:: RetrieveEventsresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: timestamp
      :type: Optional[str]

      

   .. py:attribute:: alert
      :type: Optional[bool]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: event_type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: event_source
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: event_severity
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: organisation
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: endpoint
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: sim
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: imsi
      :type: Optional[Dict[str, Any]]

      


.. py:class:: StartingaUSSDDialogrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: ussd_begin
      :type: Dict[str, Any]

      


.. py:class:: StartingaUSSDDialogresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: session_id
      :type: Optional[str]

      


.. py:class:: RetrieveOrganisationListresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: class_
      :type: Dict[str, Any]

      

   .. py:attribute:: type
      :type: Dict[str, Any]

      

   .. py:attribute:: country
      :type: Dict[str, Any]

      

   .. py:attribute:: status
      :type: Dict[str, Any]

      

   .. py:attribute:: relation
      :type: Dict[str, Any]

      

   .. py:attribute:: monthly_cost_limit
      :type: int

      

   .. py:attribute:: currency
      :type: Dict[str, Any]

      

   .. py:attribute:: created
      :type: str

      

   .. py:attribute:: verification_type
      :type: Dict[str, Any]

      

   .. py:attribute:: verification
      :type: str

      


.. py:class:: CreateanOrganisationrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: class_
      :type: Dict[str, Any]

      

   .. py:attribute:: type
      :type: Dict[str, Any]

      

   .. py:attribute:: country
      :type: Dict[str, Any]

      

   .. py:attribute:: status
      :type: Dict[str, Any]

      

   .. py:attribute:: relation
      :type: Dict[str, Any]

      

   .. py:attribute:: currency
      :type: Dict[str, Any]

      

   .. py:attribute:: verification_type
      :type: Dict[str, Any]

      

   .. py:attribute:: verification
      :type: str

      

   .. py:attribute:: ext_reference
      :type: str

      

   .. py:attribute:: monthly_cost_limit
      :type: int

      


.. py:class:: RetrieveaSingleOrganisationresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: class_
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: country
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: relation
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: monthly_cost_limit
      :type: Optional[int]

      

   .. py:attribute:: currency
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: created
      :type: Optional[str]

      

   .. py:attribute:: verification_type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: verification
      :type: Optional[str]

      


.. py:class:: UpdateOrganisationrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: class_
      :type: Dict[str, Any]

      

   .. py:attribute:: type
      :type: Dict[str, Any]

      

   .. py:attribute:: country
      :type: Dict[str, Any]

      

   .. py:attribute:: status
      :type: Dict[str, Any]

      

   .. py:attribute:: ext_reference
      :type: str

      

   .. py:attribute:: monthly_cost_limit
      :type: int

      

   .. py:attribute:: currency
      :type: Dict[str, Any]

      

   .. py:attribute:: verification_type
      :type: Dict[str, Any]

      

   .. py:attribute:: verification
      :type: str

      


.. py:class:: RetrieveOrganisationStatusesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: RetrieveAvailableOrganisationTypesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: RetrieveAvailableOrganisationRelationTypesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: RetrieveAvailableOrganisationVerificationTypesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: RetrieveContactsforanOrganisationresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: organisation
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: title
      :type: Optional[str]

      

   .. py:attribute:: department
      :type: Optional[str]

      

   .. py:attribute:: street
      :type: Optional[str]

      

   .. py:attribute:: zipcode
      :type: Optional[str]

      

   .. py:attribute:: city
      :type: Optional[str]

      

   .. py:attribute:: country
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: email
      :type: Optional[str]

      

   .. py:attribute:: phone
      :type: Optional[str]

      

   .. py:attribute:: mobile
      :type: Optional[str]

      

   .. py:attribute:: state
      :type: Optional[str]

      

   .. py:attribute:: secondary_address
      :type: Optional[str]

      


.. py:class:: CreateaContactforanOrganisationrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: type
      :type: Dict[str, Any]

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: title
      :type: str

      

   .. py:attribute:: department
      :type: str

      

   .. py:attribute:: street
      :type: str

      

   .. py:attribute:: zipcode
      :type: str

      

   .. py:attribute:: city
      :type: str

      

   .. py:attribute:: country
      :type: Dict[str, Any]

      

   .. py:attribute:: email
      :type: str

      

   .. py:attribute:: phone
      :type: str

      

   .. py:attribute:: mobile
      :type: str

      

   .. py:attribute:: state
      :type: Optional[str]

      

   .. py:attribute:: secondary_address
      :type: Optional[str]

      


.. py:class:: RetrieveaSingleContactresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: organisation
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: title
      :type: Optional[str]

      

   .. py:attribute:: department
      :type: Optional[str]

      

   .. py:attribute:: street
      :type: Optional[str]

      

   .. py:attribute:: zipcode
      :type: Optional[str]

      

   .. py:attribute:: city
      :type: Optional[str]

      

   .. py:attribute:: country
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: email
      :type: Optional[str]

      

   .. py:attribute:: phone
      :type: Optional[str]

      

   .. py:attribute:: mobile
      :type: Optional[str]

      

   .. py:attribute:: state
      :type: Optional[str]

      

   .. py:attribute:: secondary_address
      :type: Optional[str]

      


.. py:class:: UpdateaSingleContactresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: title
      :type: Optional[str]

      

   .. py:attribute:: department
      :type: Optional[str]

      

   .. py:attribute:: street
      :type: Optional[str]

      

   .. py:attribute:: zipcode
      :type: Optional[str]

      

   .. py:attribute:: city
      :type: Optional[str]

      

   .. py:attribute:: country
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: email
      :type: Optional[str]

      

   .. py:attribute:: phone
      :type: Optional[str]

      

   .. py:attribute:: mobile
      :type: Optional[str]

      


.. py:class:: Retrievelistofassignedtariffsforanorganisationresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: created
      :type: Optional[str]

      

   .. py:attribute:: default_sms_mt_rate
      :type: Optional[float]

      

   .. py:attribute:: default_sms_mo_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_issued_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_activated_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_suspended_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_activation_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_reactivation_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_suspension_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_termination_rate
      :type: Optional[float]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: currency
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: data_blocksize
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: data_throttle
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: pdp_context_definition
      :type: Optional[List[Dict[str, Any]]]

      


.. py:class:: RetrieveBillingPeriodsresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: RetrieveBillingDataByPeriodResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: Any

      


.. py:class:: RetrieveSIMlistresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: iccid
      :type: Optional[str]

      

   .. py:attribute:: production_date
      :type: Optional[str]

      

   .. py:attribute:: activation_date
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: customer_org
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: issuer_org
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: endpoint
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: imsi
      :type: Optional[str]

      

   .. py:attribute:: msisdn
      :type: Optional[str]

      

   .. py:attribute:: model
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: reseller_org
      :type: Optional[Dict[str, Any]]

      


.. py:class:: SIMResource


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: iccid
      :type: Optional[str]

      

   .. py:attribute:: production_date
      :type: Optional[str]

      

   .. py:attribute:: activation_date
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: customer_org
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: issuer_org
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: endpoint
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: imsi
      :type: Optional[str]

      

   .. py:attribute:: msisdn
      :type: Optional[str]

      

   .. py:attribute:: model
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: reseller_org
      :type: Optional[Dict[str, Any]]

      


.. py:class:: UpdateSIMrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: issuer_org
      :type: Dict[str, Any]

      

   .. py:attribute:: reseller_org
      :type: Dict[str, Any]

      

   .. py:attribute:: customer_org
      :type: Dict[str, Any]

      

   .. py:attribute:: status
      :type: Dict[str, Any]

      


.. py:class:: ListofAllAvailableSIMStatusesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: ListofIMSIsresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: imsi
      :type: Optional[str]

      

   .. py:attribute:: import_date
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: imsi_pool
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: sim
      :type: Optional[Dict[str, Any]]

      


.. py:class:: RetrieveIMSIByIDresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: imsi
      :type: Optional[str]

      

   .. py:attribute:: import_date
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: imsi_pool
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: sim
      :type: Optional[Dict[str, Any]]

      


.. py:class:: UpdateIMSIrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: status
      :type: Dict[str, Any]

      


.. py:class:: ListofallavailableIMSIstatusesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: ListofTariffsresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: created
      :type: Optional[str]

      

   .. py:attribute:: default_sms_mt_rate
      :type: Optional[float]

      

   .. py:attribute:: default_sms_mo_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_issued_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_activated_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_suspended_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_activation_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_reactivation_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_suspension_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_termination_rate
      :type: Optional[float]

      

   .. py:attribute:: used_count
      :type: Optional[int]

      

   .. py:attribute:: assigned_count
      :type: Optional[int]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: currency
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: data_blocksize
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: data_throttle
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: pdp_context_definition
      :type: Optional[List[Dict[str, Any]]]

      


.. py:class:: CreateTariffrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: default_sms_mt_rate
      :type: Optional[float]

      

   .. py:attribute:: default_sms_mo_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_issued_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_activated_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_suspended_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_activation_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_reactivation_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_suspension_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_termination_rate
      :type: Optional[float]

      

   .. py:attribute:: currency
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: data_blocksize
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: data_throttle
      :type: Optional[Dict[str, Any]]

      


.. py:class:: TariffCategory


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: used_by
      :type: Optional[int]

      


.. py:class:: RetrieveTariffresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: created
      :type: Optional[str]

      

   .. py:attribute:: default_sms_mt_rate
      :type: Optional[float]

      

   .. py:attribute:: default_sms_mo_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_issued_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_activated_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_suspended_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_activation_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_reactivation_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_suspension_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_termination_rate
      :type: Optional[float]

      

   .. py:attribute:: used_count
      :type: Optional[int]

      

   .. py:attribute:: assigned_count
      :type: Optional[int]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: currency
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: data_blocksize
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: data_throttle
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: pdp_context_definition
      :type: Optional[List[Dict[str, Any]]]

      

   .. py:attribute:: public
      :type: Optional[bool]

      

   .. py:attribute:: tariff_category
      :type: Optional[TariffCategory]

      


.. py:class:: PatchTariffrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: default_sms_mt_rate
      :type: Optional[float]

      

   .. py:attribute:: default_sms_mo_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_issued_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_activated_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_suspended_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_activation_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_reactivation_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_suspension_rate
      :type: Optional[float]

      

   .. py:attribute:: sim_termination_rate
      :type: Optional[float]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: currency
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: data_blocksize
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: data_throttle
      :type: Optional[Dict[str, Any]]

      


.. py:class:: ListofavailableTariffstatusesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: ListofRatezonesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: valid_from
      :type: Optional[str]

      

   .. py:attribute:: valid_until
      :type: Optional[str]

      

   .. py:attribute:: coverage
      :type: Optional[List[Dict[str, Any]]]

      

   .. py:attribute:: rate
      :type: Optional[List[Dict[str, Any]]]

      


.. py:class:: AddRatezonetoTariffrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: valid_from
      :type: str

      

   .. py:attribute:: valid_until
      :type: str

      


.. py:class:: PatchRatezonerequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: status
      :type: Dict[str, Any]

      

   .. py:attribute:: valid_from
      :type: str

      

   .. py:attribute:: valid_until
      :type: str

      


.. py:class:: Listofavailableratezonestatusesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: AddRatetoaRatezonerequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: rate
      :type: float

      

   .. py:attribute:: volume
      :type: int

      

   .. py:attribute:: currency
      :type: Dict[str, Any]

      

   .. py:attribute:: service
      :type: Dict[str, Any]

      

   .. py:attribute:: valid_from
      :type: str

      

   .. py:attribute:: valid_until
      :type: str

      


.. py:class:: UpdateRateofaRatezonerequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: valid_from
      :type: str

      

   .. py:attribute:: valid_until
      :type: str

      


.. py:class:: ListofTariffProfilesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: used_count
      :type: Optional[int]

      

   .. py:attribute:: tariff
      :type: Optional[Dict[str, Any]]

      


.. py:class:: CreateTariffProfilerequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: description
      :type: str

      

   .. py:attribute:: tariff
      :type: Dict[str, Any]

      


.. py:class:: RetrieveTariffProfileresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: used_count
      :type: Optional[int]

      

   .. py:attribute:: tariff
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: ratezone
      :type: Optional[List[Dict[str, Any]]]

      


.. py:class:: PatchTariffProfilerequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: description
      :type: str

      

   .. py:attribute:: tariff
      :type: Dict[str, Any]

      


.. py:class:: RetrieveCoverageresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: country
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: redundancy_count
      :type: Optional[int]

      


.. py:class:: Retrievesingleselectionsresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: tariff_plan
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: start_date
      :type: Optional[str]

      

   .. py:attribute:: expiry_date
      :type: Optional[str]

      

   .. py:attribute:: selection_date
      :type: Optional[str]

      

   .. py:attribute:: payment
      :type: Optional[List[Dict[str, Any]]]

      


.. py:class:: RetrieveServiceProfileListresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: used_count
      :type: Optional[str]

      

   .. py:attribute:: allowed_3g
      :type: Optional[bool]

      

   .. py:attribute:: allowed_4g
      :type: Optional[bool]

      

   .. py:attribute:: allowed_nb_iot
      :type: Optional[bool]

      

   .. py:attribute:: apply_sms_quota
      :type: Optional[bool]

      

   .. py:attribute:: apply_data_quota
      :type: Optional[bool]

      


.. py:class:: CreateaServiceProfilerequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: allowed_3g
      :type: Optional[bool]

      

   .. py:attribute:: allowed_4g
      :type: Optional[bool]

      

   .. py:attribute:: allowed_nb_iot
      :type: Optional[bool]

      

   .. py:attribute:: apply_sms_quota
      :type: Optional[bool]

      

   .. py:attribute:: apply_data_quota
      :type: Optional[bool]

      

   .. py:attribute:: retail
      :type: Optional[bool]

      

   .. py:attribute:: sms_p2p_int
      :type: Optional[bool]

      

   .. py:attribute:: sms_p2p_ext
      :type: Optional[bool]

      

   .. py:attribute:: prepaid
      :type: Optional[bool]

      

   .. py:attribute:: nipdp
      :type: Optional[bool]

      

   .. py:attribute:: api_callback
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: api_secret
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: moc_callback
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: esme_interface_type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: breakout_region
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: dns
      :type: Optional[Dict[str, Any]]

      


.. py:class:: RetrieveaSingleServiceProfileresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: allowed_3g
      :type: Optional[bool]

      

   .. py:attribute:: allowed_4g
      :type: Optional[bool]

      

   .. py:attribute:: allowed_nb_iot
      :type: Optional[bool]

      

   .. py:attribute:: apply_sms_quota
      :type: Optional[bool]

      

   .. py:attribute:: apply_data_quota
      :type: Optional[bool]

      

   .. py:attribute:: retail
      :type: Optional[bool]

      

   .. py:attribute:: sms_p2p_int
      :type: Optional[bool]

      

   .. py:attribute:: sms_p2p_ext
      :type: Optional[bool]

      

   .. py:attribute:: prepaid
      :type: Optional[bool]

      

   .. py:attribute:: nipdp
      :type: Optional[bool]

      

   .. py:attribute:: used_count
      :type: Optional[int]

      

   .. py:attribute:: api_callback
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: api_secret
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: moc_callback
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: esme_interface_type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: breakout_region
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: service
      :type: Optional[List[Dict[str, Any]]]

      


.. py:class:: UpdateServiceProfilerequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: allowed_3g
      :type: Optional[bool]

      

   .. py:attribute:: allowed_4g
      :type: Optional[bool]

      

   .. py:attribute:: allowed_nb_iot
      :type: Optional[bool]

      

   .. py:attribute:: apply_sms_quota
      :type: Optional[bool]

      

   .. py:attribute:: apply_data_quota
      :type: Optional[bool]

      

   .. py:attribute:: retail
      :type: Optional[bool]

      

   .. py:attribute:: sms_p2p_int
      :type: Optional[bool]

      

   .. py:attribute:: sms_p2p_ext
      :type: Optional[bool]

      

   .. py:attribute:: prepaid
      :type: Optional[bool]

      

   .. py:attribute:: nipdp
      :type: Optional[bool]

      

   .. py:attribute:: api_callback
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: api_secret
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: moc_callback
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: esme_interface_type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: breakout_region
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: dns
      :type: Optional[Dict[str, Any]]

      


.. py:class:: RetrieveAvailableServicesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: teleservice_code
      :type: Optional[int]

      

   .. py:attribute:: used_with_vlr
      :type: Optional[bool]

      

   .. py:attribute:: used_with_sgsn
      :type: Optional[bool]

      

   .. py:attribute:: traffic_type
      :type: Optional[Dict[str, Any]]

      


.. py:class:: RetrieveavailableTrafficLimitsresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: service
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: volume
      :type: Optional[int]

      

   .. py:attribute:: period
      :type: Optional[Dict[str, Any]]

      


.. py:class:: CreateTrafficLimitrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: service
      :type: List[Dict[str, Any]]

      

   .. py:attribute:: volume
      :type: int

      

   .. py:attribute:: period
      :type: Dict[str, Any]

      


.. py:class:: Period


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: time_units
      :type: Optional[int]

      

   .. py:attribute:: unit
      :type: Optional[str]

      


.. py:class:: ServiceTrafficLimitsResponseItem


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: volume
      :type: Optional[int]

      

   .. py:attribute:: period
      :type: Optional[Period]

      


.. py:class:: ServiceTrafficLimitsResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: List[ServiceTrafficLimitsResponseItem]

      


.. py:class:: RetrieveDNSlistresponseItem


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: primary
      :type: Optional[str]

      

   .. py:attribute:: secondary
      :type: Optional[str]

      

   .. py:attribute:: ip_address_version
      :type: Optional[int]

      


.. py:class:: RetrieveDNSlistresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: List[RetrieveDNSlistresponseItem]

      


.. py:class:: CreateaDNSentryrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: primary
      :type: str

      

   .. py:attribute:: secondary
      :type: str

      

   .. py:attribute:: ip_address_version
      :type: int

      


.. py:class:: Status3


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: Organisation


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: name
      :type: Optional[str]

      


.. py:class:: User


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: username
      :type: Optional[str]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: created
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Status3]

      

   .. py:attribute:: organisation
      :type: Optional[Organisation]

      


.. py:class:: CreateUserrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: username
      :type: str

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: organisation
      :type: Dict[str, Any]

      

   .. py:attribute:: roles
      :type: List[Dict[str, Any]]

      


.. py:class:: RetrievetheUserresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: username
      :type: Optional[str]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: created
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: organisation
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: roles
      :type: Optional[List[Dict[str, Any]]]

      

   .. py:attribute:: mfa
      :type: Optional[List[Dict[str, Any]]]

      


.. py:class:: UpdateUserrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: username
      :type: str

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: status
      :type: Dict[str, Any]

      


.. py:class:: RetrieveUserByUsernameresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: username
      :type: Optional[str]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: created
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: organisation
      :type: Optional[Dict[str, Any]]

      


.. py:class:: RetrieveAvailableUserStatusesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: EventType


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: EventSource


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: EventSeverity


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: Organisation1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: name
      :type: Optional[str]

      


.. py:class:: User1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: username
      :type: Optional[str]

      

   .. py:attribute:: name
      :type: Optional[str]

      


.. py:class:: Event


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: alert
      :type: Optional[bool]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: timestamp
      :type: Optional[str]

      

   .. py:attribute:: event_type
      :type: Optional[EventType]

      

   .. py:attribute:: event_source
      :type: Optional[EventSource]

      

   .. py:attribute:: event_severity
      :type: Optional[EventSeverity]

      

   .. py:attribute:: organisation
      :type: Optional[Organisation1]

      

   .. py:attribute:: user
      :type: Optional[User1]

      


.. py:class:: RetrieveEventsresponse4


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: alert
      :type: bool

      

   .. py:attribute:: description
      :type: str

      

   .. py:attribute:: timestamp
      :type: str

      

   .. py:attribute:: event_type
      :type: Dict[str, Any]

      

   .. py:attribute:: event_source
      :type: Dict[str, Any]

      

   .. py:attribute:: event_severity
      :type: Dict[str, Any]

      

   .. py:attribute:: organisation
      :type: Dict[str, Any]

      

   .. py:attribute:: user
      :type: Dict[str, Any]

      


.. py:class:: AccountActivationrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: activationKey
      :type: str

      

   .. py:attribute:: password
      :type: str

      


.. py:class:: ReSendActivationMailrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: username
      :type: str

      

   .. py:attribute:: g_recaptcha_response
      :type: str

      


.. py:class:: Id4(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: number_0
      :value: 0

      

   .. py:attribute:: number_1
      :value: 1

      


.. py:class:: Status4


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[Id4]

      


.. py:class:: CoverageUpdateVPLMNStatusPatch


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: status
      :type: Optional[Status4]

      


.. py:class:: ChangePasswordrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: old_password
      :type: str

      

   .. py:attribute:: new_password
      :type: str

      


.. py:class:: ChangePassword422response


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: error_code
      :type: Optional[int]

      

   .. py:attribute:: error_token
      :type: Optional[str]

      

   .. py:attribute:: message
      :type: Optional[str]

      

   .. py:attribute:: errors
      :type: Optional[List[Dict[str, Any]]]

      


.. py:class:: RetrieveownIPAddressSpacesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: ip_address_space
      :type: Optional[str]

      

   .. py:attribute:: ip_address_version
      :type: Optional[int]

      

   .. py:attribute:: used_count
      :type: Optional[int]

      

   .. py:attribute:: available_count
      :type: Optional[int]

      


.. py:class:: RetrieveAvailableAddressSpacesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: ip_address_space
      :type: Optional[str]

      

   .. py:attribute:: ip_address_version
      :type: Optional[int]

      


.. py:class:: Field204Response


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: Any

      


.. py:class:: RetrieveEventsresponse5


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: alert
      :type: bool

      

   .. py:attribute:: description
      :type: str

      

   .. py:attribute:: timestamp
      :type: str

      

   .. py:attribute:: event_type
      :type: Dict[str, Any]

      

   .. py:attribute:: event_source
      :type: Dict[str, Any]

      

   .. py:attribute:: event_severity
      :type: Dict[str, Any]

      

   .. py:attribute:: organisation
      :type: Dict[str, Any]

      

   .. py:attribute:: user
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: endpoint
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: sim
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: imsi
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: detail
      :type: Optional[Dict[str, Any]]

      


.. py:class:: RetrieveEventTypesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: RetrieveAvailableCountriesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country_code
      :type: Optional[str]

      

   .. py:attribute:: mcc
      :type: Optional[str]

      

   .. py:attribute:: iso_code
      :type: Optional[str]

      


.. py:class:: RetrieveAvailableCurrenciesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: code
      :type: Optional[str]

      

   .. py:attribute:: symbol
      :type: Optional[str]

      


.. py:class:: RetrieveAvailableDataBlocksizesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: octets
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: RetrieveAvailableDataThrottlesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: octets
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: RetrieveAvailableOperatorsresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: tapcode
      :type: Optional[List[Dict[str, Any]]]

      

   .. py:attribute:: mnc
      :type: Optional[List[Dict[str, Any]]]

      


.. py:class:: RetrieveAvailableBreakoutRegionsresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: ip_address
      :type: Optional[str]

      


.. py:class:: TariffPlanStatusesGetResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: Any

      


.. py:class:: TariffPlanConfigGetResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: Any

      


.. py:class:: RetrieveAvailableESMEInterfaceTypesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: description
      :type: str

      


.. py:class:: PDPContextDefinitionsGetResponse


   Bases: :py:obj:`pydantic.BaseModel`


.. py:class:: Organisation2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: organisation_type_id
      :type: Optional[str]

      

   .. py:attribute:: country_id
      :type: Optional[str]

      

   .. py:attribute:: organisation_status_id
      :type: Optional[str]

      

   .. py:attribute:: ext_reference
      :type: Optional[str]

      

   .. py:attribute:: monthly_cost_limit
      :type: Optional[str]

      

   .. py:attribute:: currency_id
      :type: Optional[int]

      

   .. py:attribute:: organisation_class_id
      :type: Optional[int]

      

   .. py:attribute:: created
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: verification_type_id
      :type: Optional[str]

      

   .. py:attribute:: verification
      :type: Optional[str]

      

   .. py:attribute:: brand_id
      :type: Optional[str]

      

   .. py:attribute:: default_sms_routing_id
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: PDPContextDefinitionsCreateUpdate


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: apn
      :type: Optional[str]

      

   .. py:attribute:: organisation
      :type: Optional[Organisation2]

      

   .. py:attribute:: auto_assign
      :type: Optional[float]

      

   .. py:attribute:: qos_subscribed
      :type: Optional[str]

      

   .. py:attribute:: ext_qos_subscribed
      :type: Optional[str]

      

   .. py:attribute:: ext2_qos_subscribed
      :type: Optional[str]

      

   .. py:attribute:: ext3_qos_subscribed
      :type: Optional[str]

      

   .. py:attribute:: ext4_qos_subscribed
      :type: Optional[str]

      


.. py:class:: PDPContextDefinitionsCreateResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: RatType1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: QoSDefinitionCreateRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: rat_type
      :type: Optional[RatType1]

      

   .. py:attribute:: max_bandwidth_dl
      :type: Optional[conint(ge=0, le=4294967295)]

      

   .. py:attribute:: max_bandwidth_ul
      :type: Optional[conint(ge=0, le=4294967295)]

      


.. py:class:: RatType2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: QoSDefinitionGetResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: rat_type
      :type: Optional[RatType2]

      

   .. py:attribute:: max_bandwidth_dl
      :type: Optional[int]

      

   .. py:attribute:: max_bandwidth_ul
      :type: Optional[int]

      


.. py:class:: QoSDefinitionPatchRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: max_bandwidth_dl
      :type: Optional[conint(ge=0, le=4294967295)]

      

   .. py:attribute:: max_bandwidth_ul
      :type: Optional[conint(ge=0, le=4294967295)]

      


.. py:class:: NetworkCoverage


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: TrafficType9


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: Currency6


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: IOTCreate


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: mnc
      :type: Optional[int]

      

   .. py:attribute:: mcc
      :type: Optional[int]

      

   .. py:attribute:: network_coverage
      :type: Optional[NetworkCoverage]

      

   .. py:attribute:: traffic_type
      :type: Optional[TrafficType9]

      

   .. py:attribute:: currency
      :type: Optional[Currency6]

      

   .. py:attribute:: rate
      :type: Optional[float]

      

   .. py:attribute:: volume
      :type: Optional[int]

      

   .. py:attribute:: blocksize
      :type: Optional[int]

      

   .. py:attribute:: valid_from
      :type: Optional[datetime.datetime]

      


.. py:class:: HasId


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: LocalDate


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: constr(regex='^\\d{4}-\\d{2}-\\d{2}$')

      


.. py:class:: LocalDateTime


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: constr(regex='^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\{2}$')

      


.. py:class:: Currency7


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: code
      :type: Optional[str]

      

   .. py:attribute:: symbol
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: GtConfig1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: imsi_prefix
      :type: Optional[str]

      

   .. py:attribute:: calling_party
      :type: Optional[str]

      

   .. py:attribute:: called_party_tt
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: MsisdnPool1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: resource_provider_id
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: Country3


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country_code
      :type: Optional[int]

      

   .. py:attribute:: mcc
      :type: Optional[float]

      

   .. py:attribute:: iso_code
      :type: Optional[str]

      

   .. py:attribute:: latitude
      :type: Optional[float]

      

   .. py:attribute:: longitude
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: Operator1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: country_id
      :type: Optional[str]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country_name
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: country
      :type: Optional[Country3]

      

   .. py:attribute:: tapcodes
      :type: Optional[str]

      

   .. py:attribute:: mncs
      :type: Optional[str]

      


.. py:class:: Organisation3


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: organisation_type_id
      :type: Optional[str]

      

   .. py:attribute:: country_id
      :type: Optional[str]

      

   .. py:attribute:: organisation_status_id
      :type: Optional[str]

      

   .. py:attribute:: ext_reference
      :type: Optional[str]

      

   .. py:attribute:: monthly_cost_limit
      :type: Optional[str]

      

   .. py:attribute:: currency_id
      :type: Optional[int]

      

   .. py:attribute:: organisation_class_id
      :type: Optional[int]

      

   .. py:attribute:: created
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: verification_type_id
      :type: Optional[str]

      

   .. py:attribute:: verification
      :type: Optional[str]

      

   .. py:attribute:: brand_id
      :type: Optional[str]

      

   .. py:attribute:: default_sms_routing_id
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: PaymentOption


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: Type1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: OrgPrepaidBalance


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: amount
      :type: Optional[float]

      

   .. py:attribute:: external_payment_identifier
      :type: Optional[str]

      

   .. py:attribute:: payment_option
      :type: Optional[PaymentOption]

      

   .. py:attribute:: type
      :type: Optional[Type1]

      


.. py:class:: SmppBind1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: system_id
      :type: Optional[str]

      

   .. py:attribute:: smpp_bind_status_id
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: SmsRoutingListItem


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: organisation
      :type: Optional[Dict[str, Any]]

      


.. py:class:: SmsRoutingList1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: organisation_type_id
      :type: Optional[str]

      

   .. py:attribute:: country_id
      :type: Optional[str]

      

   .. py:attribute:: organisation_status_id
      :type: Optional[str]

      

   .. py:attribute:: ext_reference
      :type: Optional[str]

      

   .. py:attribute:: monthly_cost_limit
      :type: Optional[str]

      

   .. py:attribute:: currency_id
      :type: Optional[int]

      

   .. py:attribute:: organisation_class_id
      :type: Optional[int]

      

   .. py:attribute:: created
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: verification_type_id
      :type: Optional[str]

      

   .. py:attribute:: verification
      :type: Optional[str]

      

   .. py:attribute:: brand_id
      :type: Optional[str]

      

   .. py:attribute:: default_sms_routing_id
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: SmsRoutingList


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: Union[List[SmsRoutingListItem], SmsRoutingList1]

      


.. py:class:: Organisation4


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: organisation_type_id
      :type: Optional[str]

      

   .. py:attribute:: country_id
      :type: Optional[str]

      

   .. py:attribute:: organisation_status_id
      :type: Optional[str]

      

   .. py:attribute:: ext_reference
      :type: Optional[str]

      

   .. py:attribute:: monthly_cost_limit
      :type: Optional[str]

      

   .. py:attribute:: currency_id
      :type: Optional[int]

      

   .. py:attribute:: organisation_class_id
      :type: Optional[int]

      

   .. py:attribute:: created
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: verification_type_id
      :type: Optional[str]

      

   .. py:attribute:: verification
      :type: Optional[str]

      

   .. py:attribute:: brand_id
      :type: Optional[str]

      

   .. py:attribute:: default_sms_routing_id
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: SmsRoutingEntry


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: organisation
      :type: Optional[Organisation4]

      


.. py:class:: SccpCalledPartyPrefix1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: prefix
      :type: Optional[str]

      

   .. py:attribute:: tt
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: Country4


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country_code
      :type: Optional[int]

      

   .. py:attribute:: mcc
      :type: Optional[float]

      

   .. py:attribute:: iso_code
      :type: Optional[str]

      

   .. py:attribute:: latitude
      :type: Optional[float]

      

   .. py:attribute:: longitude
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: SmppBind2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: system_id
      :type: Optional[str]

      

   .. py:attribute:: smpp_bind_status_id
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: Country5


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country_code
      :type: Optional[int]

      

   .. py:attribute:: mcc
      :type: Optional[float]

      

   .. py:attribute:: iso_code
      :type: Optional[str]

      

   .. py:attribute:: latitude
      :type: Optional[float]

      

   .. py:attribute:: longitude
      :type: Optional[float]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: Operator2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: country_id
      :type: Optional[str]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: country_name
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: country
      :type: Optional[Country5]

      

   .. py:attribute:: tapcodes
      :type: Optional[str]

      

   .. py:attribute:: mncs
      :type: Optional[str]

      


.. py:class:: MsisdnPool2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: resource_provider_id
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: GtConfig2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: imsi_prefix
      :type: Optional[str]

      

   .. py:attribute:: calling_party
      :type: Optional[str]

      

   .. py:attribute:: called_party_tt
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: SccpCalledPartyPrefix2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: prefix
      :type: Optional[str]

      

   .. py:attribute:: tt
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: SmsRoutingDataCreateUpdateRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: sms_routing_id
      :type: Optional[str]

      

   .. py:attribute:: country
      :type: Optional[Country4]

      

   .. py:attribute:: smpp_bind
      :type: Optional[SmppBind2]

      

   .. py:attribute:: operator
      :type: Optional[Operator2]

      

   .. py:attribute:: msisdn_pool
      :type: Optional[MsisdnPool2]

      

   .. py:attribute:: gt_config
      :type: Optional[GtConfig2]

      

   .. py:attribute:: sccp_called_party_prefix
      :type: Optional[SccpCalledPartyPrefix2]

      


.. py:class:: GetEntryPoints


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: method
      :type: str

      

   .. py:attribute:: uri
      :type: str

      

   .. py:attribute:: description
      :type: str

      


.. py:class:: OperatorPostRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: country
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: CreateMFAKeyresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: type
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: secret_key
      :type: Optional[str]

      

   .. py:attribute:: otpauth
      :type: Optional[str]

      

   .. py:attribute:: creation_date
      :type: Optional[str]

      


.. py:class:: ActivateMFAKeyrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: status
      :type: Dict[str, Any]

      

   .. py:attribute:: code
      :type: str

      


.. py:class:: MFAKeyStatusLookupresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: MFAKeyTypeLookupresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: Listoftrusteddevicesresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: operating_system
      :type: Optional[str]

      

   .. py:attribute:: browser
      :type: Optional[str]

      

   .. py:attribute:: activation_date
      :type: Optional[str]

      


.. py:class:: ListofApplicationTokensresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: created
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: expiry_date
      :type: Optional[str]

      

   .. py:attribute:: ip
      :type: Optional[str]

      

   .. py:attribute:: creator
      :type: Optional[Dict[str, Any]]

      


.. py:class:: CreateApplicationTokenrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: expiry_date
      :type: Optional[str]

      

   .. py:attribute:: ip
      :type: Optional[str]

      


.. py:class:: CreateApplicationTokenresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: application_token
      :type: Optional[str]

      


.. py:class:: ApplicationToken


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      


.. py:class:: EndpointStatus


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: ServiceProfile


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: name
      :type: Optional[str]

      


.. py:class:: TariffProfile


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: name
      :type: Optional[str]

      


.. py:class:: Sim


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: iccid
      :type: Optional[str]

      

   .. py:attribute:: msisdn
      :type: Optional[str]

      

   .. py:attribute:: imsi
      :type: Optional[str]

      


.. py:class:: IpAddressSpace


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      


.. py:class:: Status5


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: ServiceProfile1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: name
      :type: Optional[str]

      


.. py:class:: TariffProfile1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: name
      :type: Optional[str]

      


.. py:class:: IpAddressSpace1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      


.. py:class:: Sim1


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: int

      

   .. py:attribute:: iccid
      :type: Optional[str]

      

   .. py:attribute:: msisdn
      :type: Optional[str]

      

   .. py:attribute:: imsi
      :type: Optional[str]

      


.. py:class:: Endpoint


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: tags
      :type: Optional[str]

      

   .. py:attribute:: service_profile
      :type: ServiceProfile1

      

   .. py:attribute:: tariff_profile
      :type: TariffProfile1

      

   .. py:attribute:: ip_address
      :type: Optional[str]

      

   .. py:attribute:: ip_address_space
      :type: Optional[IpAddressSpace1]

      

   .. py:attribute:: sim
      :type: Optional[Sim1]

      

   .. py:attribute:: imei
      :type: Optional[str]

      

   .. py:attribute:: imei_lock
      :type: Optional[bool]

      

   .. py:attribute:: created
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: last_updated
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: status
      :type: Status5

      


.. py:class:: RetrieveSingleEndpointresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: tags
      :type: Optional[str]

      

   .. py:attribute:: created
      :type: Optional[str]

      

   .. py:attribute:: last_updated
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: service_profile
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: tariff_profile
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: sim
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: imei
      :type: Optional[str]

      

   .. py:attribute:: imei_lock
      :type: Optional[bool]

      

   .. py:attribute:: ip_address
      :type: Optional[str]

      

   .. py:attribute:: ip_address_space
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: runtime_data
      :type: Optional[Dict[str, Any]]

      


.. py:class:: UpdateEndpointrequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: tags
      :type: str

      

   .. py:attribute:: status
      :type: Dict[str, Any]

      

   .. py:attribute:: service_profile
      :type: Dict[str, Any]

      

   .. py:attribute:: tariff_profile
      :type: Dict[str, Any]

      

   .. py:attribute:: ip_address
      :type: str

      

   .. py:attribute:: ip_address_space
      :type: Dict[str, Any]

      

   .. py:attribute:: sim
      :type: Dict[str, Any]

      

   .. py:attribute:: imei
      :type: str

      

   .. py:attribute:: imei_lock
      :type: bool

      


.. py:class:: RetrieveEndpointConnectivityStatusresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: status
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: location
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: pdp_context
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: services
      :type: Optional[List[str]]

      


.. py:class:: GetEndpointLocationByIdResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: gcid_cache_id
      :type: Optional[str]

      

   .. py:attribute:: gcid
      :type: Optional[str]

      

   .. py:attribute:: create_date
      :type: Optional[str]

      

   .. py:attribute:: lat
      :type: Optional[str]

      

   .. py:attribute:: lng
      :type: Optional[str]

      

   .. py:attribute:: accuracy
      :type: Optional[str]

      


.. py:class:: RetrieveEndpointStatisticsresponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: last_month
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: current_month
      :type: Optional[Dict[str, Any]]

      

   .. py:attribute:: last_hour
      :type: Optional[Dict[str, Any]]

      


.. py:class:: Status6


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: Type2


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: CloudConnectAttachment


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: user_id
      :type: Optional[int]

      

   .. py:attribute:: creation_date
      :type: Optional[str]

      

   .. py:attribute:: accept_attachment_expiry_date
      :type: Optional[str]

      

   .. py:attribute:: termination_date
      :type: Optional[str]

      

   .. py:attribute:: aws_transit_gateway_attachment_id
      :type: Optional[str]

      

   .. py:attribute:: aws_vpn_connection_id
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Status6]

      

   .. py:attribute:: type
      :type: Optional[Type2]

      

   .. py:attribute:: region
      :type: Optional[str]

      


.. py:class:: Status7


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: Type3


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: GetCloudConnectAttachmentsResponseItem


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: user_id
      :type: Optional[int]

      

   .. py:attribute:: creation_date
      :type: Optional[str]

      

   .. py:attribute:: accept_attachment_expiry_date
      :type: Optional[str]

      

   .. py:attribute:: termination_date
      :type: Optional[str]

      

   .. py:attribute:: aws_transit_gateway_attachment_id
      :type: Optional[str]

      

   .. py:attribute:: aws_vpn_connection_id
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Status7]

      

   .. py:attribute:: type
      :type: Optional[Type3]

      

   .. py:attribute:: region
      :type: Optional[str]

      


.. py:class:: GetCloudConnectAttachmentsResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: List[GetCloudConnectAttachmentsResponseItem]

      


.. py:class:: CloudConnectBreakoutType


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: GetCloudConnectBreakoutTypesResponseItem


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: GetCloudConnectBreakoutTypesResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: List[GetCloudConnectBreakoutTypesResponseItem]

      


.. py:class:: Status8


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      


.. py:class:: Metrics


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: tunnel_state
      :type: Optional[str]

      

   .. py:attribute:: bytes_in
      :type: Optional[Dict[str, float]]

      

   .. py:attribute:: bytes_out
      :type: Optional[Dict[str, float]]

      


.. py:class:: TunnelInformation


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: outside_address
      :type: Optional[str]

      

   .. py:attribute:: inside_cidr
      :type: Optional[str]

      

   .. py:attribute:: metrics
      :type: Optional[Metrics]

      

   .. py:attribute:: asn
      :type: Optional[float]

      

   .. py:attribute:: public_ip
      :type: Optional[str]

      


.. py:class:: GetCloudConnectAttachmentByIdResponseItem


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: user_id
      :type: Optional[int]

      

   .. py:attribute:: creation_date
      :type: Optional[str]

      

   .. py:attribute:: accept_attachment_expiry_date
      :type: Optional[str]

      

   .. py:attribute:: termination_date
      :type: Optional[str]

      

   .. py:attribute:: aws_transit_gateway_attachment_id
      :type: Optional[str]

      

   .. py:attribute:: aws_vpn_connection_id
      :type: Optional[str]

      

   .. py:attribute:: status
      :type: Optional[Status8]

      

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: tunnel_information
      :type: Optional[TunnelInformation]

      


.. py:class:: GetCloudConnectAttachmentByIdResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: List[GetCloudConnectAttachmentByIdResponseItem]

      


.. py:class:: Type4(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: integer_1
      :value: 1

      


.. py:class:: CreateCloudConnectTGWRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: type
      :type: Type4

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: vpc_cidr
      :type: List[str]

      

   .. py:attribute:: region
      :type: str

      

   .. py:attribute:: aws_account_id
      :type: constr(regex='^\\d{12}$')

      


.. py:class:: Type5(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: integer_2
      :value: 2

      

   .. py:attribute:: integer_3
      :value: 3

      


.. py:class:: CreateCloudConnectVPNRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: type
      :type: Type5

      

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: region
      :type: Optional[str]

      

   .. py:attribute:: public_ip
      :type: str

      

   .. py:attribute:: psk
      :type: Optional[str]

      

   .. py:attribute:: asn
      :type: Optional[int]

      

   .. py:attribute:: premise_cidr
      :type: List[str]

      

   .. py:attribute:: inside_cidr
      :type: Optional[List[str]]

      


.. py:class:: Currency8


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: CloudConnectCharge


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: breakout_type_id
      :type: Optional[int]

      

   .. py:attribute:: amount
      :type: Optional[float]

      

   .. py:attribute:: currency
      :type: Optional[Currency8]

      


.. py:class:: Currency9


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: ListCloudConnectPricesResponseItem


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      

   .. py:attribute:: breakout_type_id
      :type: Optional[int]

      

   .. py:attribute:: amount
      :type: Optional[float]

      

   .. py:attribute:: currency
      :type: Optional[Currency9]

      


.. py:class:: ListCloudConnectPricesResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: List[ListCloudConnectPricesResponseItem]

      


.. py:class:: BreakoutTypeId(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.

   .. py:attribute:: integer_1
      :value: 1

      

   .. py:attribute:: integer_2
      :value: 2

      

   .. py:attribute:: integer_3
      :value: 3

      

   .. py:attribute:: integer_4
      :value: 4

      

   .. py:attribute:: integer_5
      :value: 5

      

   .. py:attribute:: integer_6
      :value: 6

      


.. py:class:: Currency10


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[int]

      


.. py:class:: CloudConnectCustomPriceRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: breakout_type_id
      :type: BreakoutTypeId

      

   .. py:attribute:: amount
      :type: float

      

   .. py:attribute:: currency
      :type: Optional[Currency10]

      


.. py:class:: Region


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: Id
      :type: Optional[float]

      

   .. py:attribute:: Name
      :type: Optional[str]

      

   .. py:attribute:: Description
      :type: Optional[str]

      


.. py:class:: GetCloudConnectTransitGatewaysResponseItem


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: id
      :type: Optional[float]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: aws_transit_gateway_id
      :type: Optional[str]

      

   .. py:attribute:: active
      :type: Optional[bool]

      

   .. py:attribute:: organisation_id
      :type: Optional[float]

      

   .. py:attribute:: region
      :type: Optional[Region]

      


.. py:class:: GetCloudConnectTransitGatewaysResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: List[GetCloudConnectTransitGatewaysResponseItem]

      


.. py:class:: CreateCloudConnectTransitGatewaysRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: region
      :type: Optional[str]

      

   .. py:attribute:: aws_transit_gateway_id
      :type: Optional[str]

      

   .. py:attribute:: active
      :type: Optional[bool]

      

   .. py:attribute:: organisation_id
      :type: Optional[float]

      


.. py:class:: UpdateCloudConnectTransitGatewayByIdRequest


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: active
      :type: Optional[bool]

      


.. py:class:: GetCloudConnectBreakoutTypeWhitelistResponseItem


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: organisation_id
      :type: Optional[float]

      

   .. py:attribute:: breakout_type_id
      :type: Optional[float]

      

   .. py:attribute:: organisation_name
      :type: Optional[str]

      


.. py:class:: GetCloudConnectBreakoutTypeWhitelistResponse


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: __root__
      :type: List[GetCloudConnectBreakoutTypeWhitelistResponseItem]

      


.. py:class:: Formfactor


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: id
      :type: Optional[float]

      


.. py:class:: SimModel


   Bases: :py:obj:`pydantic.BaseModel`

   .. py:attribute:: sim_type_id
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: sim_manufacturer_id
      :type: Optional[str]

      

   .. py:attribute:: sim_formfactor_id
      :type: Optional[str]

      

   .. py:attribute:: memory_size
      :type: Optional[str]

      

   .. py:attribute:: formfactor
      :type: Optional[Formfactor]

      


