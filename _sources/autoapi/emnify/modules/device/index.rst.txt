:py:mod:`emnify.modules.device`
===============================

.. py:module:: emnify.modules.device


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   api_call_manager/index.rst
   manager/index.rst
   models/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   emnify.modules.device.DeviceManager




.. py:class:: DeviceManager(client)

   Manager that allows to get/retrieve/create/update/send_sms to device

   .. py:method:: device_model(self)
      :property:


   .. py:method:: list_sms_model(self)
      :property:


   .. py:method:: device_detailed_model(self)
      :property:


   .. py:method:: sms_create_model(self)
      :property:


   .. py:method:: event_model(self)
      :property:


   .. py:method:: status_model(self)
      :property:


   .. py:method:: device_create_model(self)
      :property:


   .. py:method:: device_update_model(self)
      :property:


   .. py:method:: service_profile_model(self)
      :property:


   .. py:method:: tariff_profile_model(self)
      :property:


   .. py:method:: get_device_sort_enum(self)
      :property:


   .. py:method:: get_device_filter_model(self) -> Type[emnify.modules.device.models.FilterDeviceModel]
      :property:


   .. py:method:: get_device_sms_list(self, *, device: Union[emnify.modules.device.models.Device, int]) -> emnify.modules.device.models.ListSms


   .. py:method:: send_sms(self, *, device: Union[emnify.modules.device.models.Device, int, emnify.modules.device.models.RetrieveDevice], sms: emnify.modules.device.models.SmsCreateModel) -> bool

      Method sends sms to device
      :param device: device model or id of device
      :param sms: SmsCreateModel
      :return: True if sms was sent


   .. py:method:: update_device(self, *, device_id: int, device: emnify.modules.device.models.UpdateDevice) -> emnify.modules.device.models.Device

      Method updates device
      :param device_id: id of device
      :param device: device update model
      :return: True if device was updated


   .. py:method:: reset_connectivity_network(self, device_id: int) -> True

      Method resets device connectivity network
      :param device_id: id of device
      :return: True if reset of network was successful


   .. py:method:: reset_connectivity_data(self, device_id: int) -> True

      Method resets device connectivity data
      :param device_id: id of device
      :return: True if reset of data was successful


   .. py:method:: get_device_connectivity_status(self, device_id: int) -> emnify.modules.device.models.DeviceConnectivityStatus

      Method returns device connectivity status
      :param device_id: id of device
      :return: DeviceConnectivityStatus model


   .. py:method:: get_devices_list(self, *args, filter_model: emnify.modules.device.models.FilterDeviceModel = None, sort_enum: emnify.modules.device.models.DeviceSortModel = None, **kwargs) -> Generator[emnify.modules.device.models.RetrieveDevice, None, None]

      Method returns list of devices
      :param filter_model: device filter model
      :param sort_enum: device sort enum
      :return: list of devices


   .. py:method:: delete_device(self, device_id: int) -> True

      :param device_id: id of device
      :return: True if device was deleted


   .. py:method:: add_device_blacklist_operator(self, device_id: int, operator_id: int) -> True

      :param device_id: id of device
      :param operator_id: id of operator
      :return: True if operator was added to blacklist


   .. py:method:: delete_device_blacklist_operator(self, device_id: int, operator_id: int)

      :param device_id: id of device
      :param operator_id: id of operator
      :return: True if operator was deleted from blacklist


   .. py:method:: get_device_operator_blacklist(self, device_id: int)

      :param device_id: id of device
      :return: list of operators


   .. py:method:: get_device_events_list(self, device: Union[emnify.modules.device.models.Device, int])

      :param device: Device pydantic-model or int
      :return: Generator with Device objects


   .. py:method:: change_status(self, device: Union[emnify.modules.device.models.UpdateDevice, emnify.modules.device.models.Device, emnify.modules.device.models.RetrieveDevice, int], enable: bool = None, disable: bool = None) -> None

      :param device: id or device model for update
      :param enable: boolean parameter for enable a Device
      :param disable: boolean parameter for disable a Device


   .. py:method:: disable_device(self, device_id: int)

      Method for changing a device status to 'disabled'
      :param device_id: id of device
      :return: True if device was disabled


   .. py:method:: release_sim(self, device_id: int)

      This method allows to release the assigned SIM from device by device_id


   .. py:method:: assign_sim(self, device_id: int, sim_id: int, enable: bool = False) -> None

      this method allow to assign a SIM to the device


   .. py:method:: create_device(self, device: emnify.modules.device.models.Device) -> bool

      Method for creating a device
      :param device: device model
      :return: True if device was created


   .. py:method:: retrieve_device(self, device_id: int) -> emnify.modules.device.models.RetrieveDevice


   .. py:method:: validate_device(device: emnify.modules.device.models.Device) -> int
      :staticmethod:


   .. py:method:: __check_device_status(device, status: dict)
      :staticmethod:

      Hidden method for checking device for status update
      devices to activate must have activated sim


   .. py:method:: __change_device_status(self, action: str, device)

      Hidden method for changing status of the device


   .. py:method:: __transform_all_devices_filter_params(filter_model: emnify.modules.device.models.FilterDeviceModel = None, sort_enum: emnify.modules.device.models.DeviceSortModel = None) -> dict
      :staticmethod:



