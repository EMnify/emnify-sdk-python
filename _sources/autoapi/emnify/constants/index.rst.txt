emnify.constants
================

.. py:module:: emnify.constants


Classes
-------

.. autoapisummary::

   emnify.constants.ExtendedEnum
   emnify.constants.DeviceSort
   emnify.constants.IdValues
   emnify.constants.RequestsType
   emnify.constants.AuthenticateRequestsUrl
   emnify.constants.RequestDefaultHeadersKeys
   emnify.constants.RequestDefaultHeadersValues
   emnify.constants.DeviceStatuses
   emnify.constants.SimStatusesID
   emnify.constants.SimStatusesDict
   emnify.constants.ResponseHeaders
   emnify.constants.SimSort
   emnify.constants.RequestUrls


Module Contents
---------------

.. py:class:: ExtendedEnum(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:method:: list()
      :classmethod:



.. py:class:: DeviceSort(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: ID
      :value: 'id'



   .. py:attribute:: STATUS
      :value: 'status'



   .. py:attribute:: LAST_UPDATED
      :value: 'last_updated'



   .. py:attribute:: CREATED
      :value: 'created'



   .. py:attribute:: NAME
      :value: 'name'



   .. py:attribute:: TAGS
      :value: 'tags'



   .. py:attribute:: IP_ADDRESS
      :value: 'ip_address'



   .. py:attribute:: IMEI
      :value: 'imei'



.. py:class:: IdValues(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: ID
      :value: 'id'



.. py:class:: RequestsType(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: GET
      :value: 'get'



   .. py:attribute:: POST
      :value: 'post'



   .. py:attribute:: PUT
      :value: 'put'



   .. py:attribute:: DELETE
      :value: 'delete'



   .. py:attribute:: PATCH
      :value: 'patch'



.. py:class:: AuthenticateRequestsUrl(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: V1_AUTHENTICATE
      :value: '/v1/authenticate'



.. py:class:: RequestDefaultHeadersKeys(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: ACCEPT
      :value: 'accept'



   .. py:attribute:: AUTHORIZATION
      :value: 'authorization'



   .. py:attribute:: XEmnOriginApp
      :value: 'x-emn-origin-app'



   .. py:attribute:: XEmnOriginAppVersion
      :value: 'x-emn-origin-app-version'



   .. py:attribute:: USER_AGENT
      :value: 'User-Agent'



.. py:class:: RequestDefaultHeadersValues(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: APPLICATION_JSON
      :value: 'application/json'



   .. py:attribute:: BEARER_TOKEN
      :value: 'Bearer {}'



   .. py:attribute:: PYTHONSDK_VERSION


   .. py:attribute:: PYTHONSDK
      :value: 'emnifyPythonSDK'



   .. py:attribute:: name_and_version


   .. py:attribute:: requests_user_agent


   .. py:attribute:: python_version


   .. py:attribute:: platform_info


   .. py:attribute:: details


   .. py:attribute:: USER_AGENT


.. py:class:: DeviceStatuses(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: ENABLED_ID
      :value: 0



   .. py:attribute:: DISABLED_ID
      :value: 1



   .. py:attribute:: DELETED_ID
      :value: 2



   .. py:attribute:: ENABLED_DICT


   .. py:attribute:: DISABLED_DICT


   .. py:attribute:: DELETED_DICT


.. py:class:: SimStatusesID(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: ISSUED_ID
      :value: 0



   .. py:attribute:: ACTIVATED_ID
      :value: 1



   .. py:attribute:: SUSPENDED_ID
      :value: 2



   .. py:attribute:: DELETED_ID
      :value: 3



   .. py:attribute:: FACTORY_TEST_ID
      :value: 4



.. py:class:: SimStatusesDict(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: ISSUED_DICT


   .. py:attribute:: ACTIVATED_DICT


   .. py:attribute:: SUSPENDED_DICT


   .. py:attribute:: DELETED_DICT


   .. py:attribute:: FACTORY_TEST_DICT


.. py:class:: ResponseHeaders(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: COUNT_PER_PAGE
      :value: 'X-Count-Per-Page'



   .. py:attribute:: CURRENT_PAGE
      :value: 'X-Current-Page'



   .. py:attribute:: TOTAL_PAGES
      :value: 'X-Total-Pages'



   .. py:attribute:: TOTAL_COUNT
      :value: 'X-Total-Count'



.. py:class:: SimSort(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: id
      :value: 'ID'



   .. py:attribute:: issuer_org
      :value: 'ISSUER_ORG'



   .. py:attribute:: reseller_org
      :value: 'RESELLER_ORG'



   .. py:attribute:: customer_org
      :value: 'CUSTOMER_PRG'



   .. py:attribute:: iccid
      :value: 'ICCID'



   .. py:attribute:: status
      :value: 'STATUS'



   .. py:attribute:: production_date
      :value: 'PRODUCTION_DATE'



   .. py:attribute:: endpoint
      :value: 'ENDPOINT'



   .. py:attribute:: model
      :value: 'MODEL'



.. py:class:: RequestUrls(*args, **kwds)

   Bases: :py:obj:`ExtendedEnum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: ENDPOINT_IN_URL
      :value: '/v1/endpoint/{endpoint_id}'



