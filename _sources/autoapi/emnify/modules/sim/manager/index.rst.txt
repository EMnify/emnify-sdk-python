:py:mod:`emnify.modules.sim.manager`
====================================

.. py:module:: emnify.modules.sim.manager


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   emnify.modules.sim.manager.SimManager




.. py:class:: SimManager(client)

   .. py:property:: get_sim_list_model


   .. py:property:: get_sim_update_model


   .. py:property:: get_sim_filter_model


   .. py:property:: get_sim_sort_enum


   .. py:method:: get_sim_list(without_device: bool = None, filter_model: emnify.modules.sim.models.SimFilter = None, sort_enum: emnify.constants.SimSort = None)

      :param without_device: Allows to add a filter for request to find all SIM`s without device
      :param filter_model: Model for request`s filtering
      :param sort_enum: Model for request`s sorting


   .. py:method:: retrieve_sim(sim_id: int)

      Method for retrieving details of single sim by id


   .. py:method:: register_sim(bic: str) -> Union[List[emnify.modules.sim.models.SimList], emnify.modules.sim.models.SimList]

      :param bic: BIC number of sim/batch sims for registration


   .. py:method:: update_sim(sim_id: int, sim: emnify.modules.sim.models.SimUpdate) -> bool

      Method for updating sim`s
      :param sim_id: int of sim to update
      :param sim: filled sim update model


   .. py:method:: activate_sim(sim_id: int)

      Method for activating sim - changing status to 'active'
      :param sim_id: int of sim to update


   .. py:method:: suspend_sim(sim_id: int)

      Method for activating sim - changing status to 'active'
      :param sim_id: int of sim to update


   .. py:method:: issue_sim(sim_id: int)

      Method for activating sim - changing status to 'active'
      :param sim_id: int of sim to update


   .. py:method:: __transform_sim_filter_params(filter_model: emnify.modules.sim.models.SimFilter = None, sort_enum: emnify.constants.SimSort = None, without_device: bool = None) -> dict
      :staticmethod:



