:py:mod:`emnify.modules.device.api_call_manager`
================================================

.. py:module:: emnify.modules.device.api_call_manager


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   emnify.modules.device.api_call_manager.GetAllDevicesApiCall
   emnify.modules.device.api_call_manager.GetEventsByDevice
   emnify.modules.device.api_call_manager.CreateDevice
   emnify.modules.device.api_call_manager.GetAllSmsFromDevice
   emnify.modules.device.api_call_manager.SendSmsToDevice
   emnify.modules.device.api_call_manager.RetrieveDevice
   emnify.modules.device.api_call_manager.UpdateDevice
   emnify.modules.device.api_call_manager.DeleteDevice
   emnify.modules.device.api_call_manager.GetOperatorBlacklist
   emnify.modules.device.api_call_manager.AddOperatorBlacklist
   emnify.modules.device.api_call_manager.DeleteOperatorBlacklist
   emnify.modules.device.api_call_manager.ResetConnectivityPatch
   emnify.modules.device.api_call_manager.GetDeviceConnectivity




.. py:class:: GetAllDevicesApiCall

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      :annotation: = /v1/endpoint

      

   .. py:attribute:: request_method_name
      

      

   .. py:attribute:: response_handlers
      

      


.. py:class:: GetEventsByDevice

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      :annotation: = /v1/endpoint/{endpoint_id}/event

      

   .. py:attribute:: request_method_name
      

      


.. py:class:: CreateDevice

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      :annotation: = /v1/endpoint

      

   .. py:attribute:: request_method_name
      

      

   .. py:attribute:: response_handlers
      

      

   .. py:method:: process_exception(self, response: requests.Response, client, data: dict = None, *args, **kwargs)


   .. py:method:: return_success(self, response: requests.Response, client, data: dict = None, *args, **kwargs) -> True



.. py:class:: GetAllSmsFromDevice

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      :annotation: = /v1/endpoint/{endpoint_id}/sms

      

   .. py:attribute:: request_method_name
      

      


.. py:class:: SendSmsToDevice

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      :annotation: = /v1/endpoint/{endpoint_id}/sms

      

   .. py:attribute:: request_method_name
      

      

   .. py:attribute:: response_handlers
      

      


.. py:class:: RetrieveDevice

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      

      

   .. py:attribute:: request_method_name
      

      


.. py:class:: UpdateDevice

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      

      

   .. py:attribute:: request_method_name
      

      

   .. py:attribute:: response_handlers
      

      


.. py:class:: DeleteDevice

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      

      

   .. py:attribute:: request_method_name
      

      


.. py:class:: GetOperatorBlacklist

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      :annotation: = /v1/endpoint/{endpoint_id}/operator_blacklist

      

   .. py:attribute:: request_method_name
      

      


.. py:class:: AddOperatorBlacklist

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      :annotation: = /v1/endpoint/{endpoint_id}/operator_blacklist/{operator_id}

      

   .. py:attribute:: request_method_name
      

      

   .. py:method:: process_exception(self, response: requests.Response, client, data: dict = None, *args, **kwargs)



.. py:class:: DeleteOperatorBlacklist

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      :annotation: = /v1/endpoint/{endpoint_id}/operator_blacklist/{operator_id}

      

   .. py:attribute:: request_method_name
      

      

   .. py:method:: process_exception(self, response: requests.Response, client, data: dict = None, *args, **kwargs)



.. py:class:: ResetConnectivityPatch

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      :annotation: = /v1/endpoint/{endpoint_id}/connectivity

      

   .. py:attribute:: request_method_name
      

      


.. py:class:: GetDeviceConnectivity

   Bases: :py:obj:`emnify.api_manager.BaseApiManager`

   Base manager for api calls handling

   .. py:attribute:: request_url_prefix
      :annotation: = /v1/endpoint/{endpoint_id}/connectivity

      

   .. py:attribute:: request_method_name
      

      

   .. py:attribute:: response_handlers
      

      

   .. py:method:: process_exception(self, response: requests.Response, client, data: dict = None, *args, **kwargs)



